group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot with Dark2 color palette
ggplot(avg_at_t14, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t14",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +  # Using the Dark2 color palette
theme_minimal()
}
# Plot the average life category distribution at t14
print(plot_life_categoryt14(data_long))
# Plot for t13 with Dark2 color palette
plot_life_categoryt13 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater", "REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t13
data_t13 <- data_long %>% filter(time_point == "t13")
# Calculate the average value for each treatment group at t13
avg_at_t13 <- data_t13 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot with Dark2 color palette
ggplot(avg_at_t13, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t13",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +  # Using the Dark2 color palette
theme_minimal()
}
# Plot for t13 with Dark2 color palette
plot_life_categoryt13 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater", "REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t13
data_t13 <- data_long %>% filter(time_point == "t13")
# Calculate the average value for each treatment group at t13
avg_at_t13 <- data_t13 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot with Dark2 color palette
ggplot(avg_at_t13, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t13",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +  # Using the Dark2 color palette
theme_minimal()
}
# Plot the average life category distribution at t13
print(plot_life_categoryt13(data_long))
# Plot for t12 with Dark2 color palette
plot_life_categoryt12 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater", "REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t12
data_t12 <- data_long %>% filter(time_point == "t12")
# Calculate the average value for each treatment group at t12
avg_at_t12 <- data_t12 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot with Dark2 color palette
ggplot(avg_at_t12, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t12",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +  # Using the Dark2 color palette
theme_minimal()
}
# Plot the average life category distribution at t12
print(plot_life_categoryt12(data_long))
# Plot for t11 with Dark2 color palette
plot_life_categoryt11 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater", "REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t11
data_t11 <- data_long %>% filter(time_point == "t11")
# Calculate the average value for each treatment group at t11
avg_at_t11 <- data_t11 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot with Dark2 color palette
ggplot(avg_at_t11, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t11",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +  # Using the Dark2 color palette
theme_minimal()
}
# Plot the average life category distribution at t11
print(plot_life_categoryt11(data_long))
# Plot for t10 with Dark2 color palette
plot_life_categoryt10 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater", "REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t10
data_t10 <- data_long %>% filter(time_point == "t10")
# Calculate the average value for each treatment group at t10
avg_at_t10 <- data_t10 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot with Dark2 color palette
ggplot(avg_at_t10, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t10",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +  # Using the Dark2 color palette
theme_minimal()
}
# Plot the average life category distribution at t10
print(plot_life_categoryt10(data_long))
# Plot for t9 with Dark2 color palette
plot_life_categoryt9 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater", "REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t9
data_t9 <- data_long %>% filter(time_point == "t9")
# Calculate the average value for each treatment group at t9
avg_at_t9 <- data_t9 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot with Dark2 color palette
ggplot(avg_at_t9, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t9",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +  # Using the Dark2 color palette
theme_minimal()
}
# Plot the average life category distribution at t9
print(plot_life_categoryt9(data_long))
# Plot for t8 with Dark2 color palette
plot_life_categoryt8 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater", "REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t8
data_t8 <- data_long %>% filter(time_point == "t8")
# Calculate the average value for each treatment group at t8
avg_at_t8 <- data_t8 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot with Dark2 color palette
ggplot(avg_at_t8, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t8",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +  # Using the Dark2 color palette
theme_minimal()
}
# Plot the average life category distribution at t8
print(plot_life_categoryt8(data_long))
# Plot for t7
plot_life_category_t7 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater","REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t7
data_t7 <- data_long %>% filter(time_point == "t7")
# Calculate the average value for each treatment group at t7
avg_at_t7 <- data_t7 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot
ggplot(avg_at_t7, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t7",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
}
# Plot the average life category distribution at t7
print(plot_life_category_t7(data_long))
# Plot for t0
plot_life_category_t0 <- function(data_long) {
# Define the desired order of treatments
desired_order <- c("seawater","REF1", "REF2", "20", "35", "50", "none", "v3", "PAhh", "puA16", "f7", "f8", "f23", "f24", "all")
# Convert treatment column to factor with desired order
data_long$treatment <- factor(data_long$treatment, levels = desired_order)
# Filter the data for time point t0
data_t0 <- data_long %>% filter(time_point == "t0")
# Calculate the average value for each treatment group at t0
avg_at_t0 <- data_t0 %>%
group_by(treatment, category) %>%
summarise(avg_value = mean(value))
# Plot
ggplot(avg_at_t0, aes(x = treatment, y = avg_value, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Life Category Distribution at t0",
x = "Treatment", y = "Average Number of Larvae") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
}
# Plot the average life category distribution at t0
print(plot_life_category_t0(data_long))
# install.packages(c("lubridate", "ggsurvfit", "gtsummary", "tidycmprsk"))
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
install.packages(c("lubridate", "ggsurvfit", "gtsummary", "tidycmprsk"))
library(lubridate)
library(ggsurvfit)
library(gtsummary)
#install.packages(c("lubridate", "ggsurvfit", "gtsummary", "tidycmprsk"))
# Install packages if needed
install.packages(c("knitr", "dplyr", "survival", "ggplot2", "here", "tibble"))
library(knitr)
install.packages("xfun")
install.packages("knitr")
library(knitr)
Rtools
writeLines('PATH="${RTOOLS44_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS44_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS44_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.getenv("PATH")
install.packages("xfun", type = "source")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
install.packages("xfun", type = "source")
# Install xfun from source
install.packages("xfun", type = "source")
# Install knitr
install.packages("knitr")
library(readr)
Montipora_capitata_HIv3_genes_fixed <- read_delim("Multistage_Omics/Mapping/M_capitata/Montipora_capitata_HIv3.genes_fixed.gff3",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(Montipora_capitata_HIv3_genes_fixed)
library(readr)
Pocillopora_acuta_HIv2_genes_gff3 <- read_delim("C:/Users/amurgueitio/Downloads/Pocillopora_acuta_HIv2.genes.gff3.gz",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(Pocillopora_acuta_HIv2_genes_gff3)
#Packages-------------------------------------------------------------------------------
if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
if ("RColorBrewer" %in% rownames(installed.packages()) == 'FALSE') install.packages('RColorBrewer')
if ("WGCNA" %in% rownames(installed.packages()) == 'FALSE') install.packages('WGCNA')
if ("flashClust" %in% rownames(installed.packages()) == 'FALSE') install.packages('flashClust')
if ("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("pheatmap" %in% rownames(installed.packages()) == 'FALSE') install.packages('pheatmap')
if ("magrittr" %in% rownames(installed.packages()) == 'FALSE') install.packages('magrittr')
if ("vegan" %in% rownames(installed.packages()) == 'FALSE') install.packages('vegan')
if ("factoextra" %in% rownames(installed.packages()) == 'FALSE') install.packages('factoextra')
if ("preprocessCore" %in% rownames(installed.packages()) == 'FALSE') BiocManager::install("preprocessCore")
library("tidyverse")
library("genefilter")
if ("genefilter" %in% rownames(installed.packages()) == 'FALSE') BiocManager::install("genefilter")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
BiocManager::install
library(installr)
updateR()
updateR()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
R.version
library("tidyverse")
library("genefilter")
library("DESeq2")
library("RColorBrewer")
library("WGCNA")
library("flashClust")
library("gridExtra")
library("ComplexHeatmap")
library("goseq")
library("clusterProfiler")
library("pheatmap")
library("magrittr")
library("vegan")
library("factoextra")
library("dplyr")
library("dendsort")
library("NbClust")
library("simplifyEnrichment")
library("factoextra")
library("VennDiagram")
library("patchwork")
library("dendsort")
library("ggplot2")
library("dplyr")
# Read the CSV file with specified column types
gcount_raw <- read_csv("merged_data_acropora_montipora_pocillopora_spis.csv",
col_types = cols(
DRR318288 = col_integer(),
DRR318289 = col_integer(),
DRR318291 = col_integer(),
DRR318293 = col_integer(),
DRR318294 = col_integer(),
DRR318295 = col_integer(),
DRR318297 = col_integer(),
DRR318298 = col_integer(),
DRR318299 = col_integer(),
AH1 = col_integer(),
AH2 = col_integer(),
SRR14333320 = col_integer(),
SRR14333321 = col_integer(),
SRR14333322 = col_integer(),
SRR14333323 = col_integer(),
SRR14333324 = col_integer(),
SRR14333325 = col_integer(),
SRR14333326 = col_integer(),
SRR14333327 = col_integer()
))
treatmentinfo <- read_csv("treatmentinfo_merged.csv")
setwd("C:/Users/amurgueitio/Documents/Multistage_Omics/Multi_species_WGCNA")
# Load necessary library
library(readr)
# Read the CSV file with specified column types
gcount_raw <- read_csv("merged_data_acropora_montipora_pocillopora_spis.csv",
col_types = cols(
DRR318288 = col_integer(),
DRR318289 = col_integer(),
DRR318291 = col_integer(),
DRR318293 = col_integer(),
DRR318294 = col_integer(),
DRR318295 = col_integer(),
DRR318297 = col_integer(),
DRR318298 = col_integer(),
DRR318299 = col_integer(),
AH1 = col_integer(),
AH2 = col_integer(),
SRR14333320 = col_integer(),
SRR14333321 = col_integer(),
SRR14333322 = col_integer(),
SRR14333323 = col_integer(),
SRR14333324 = col_integer(),
SRR14333325 = col_integer(),
SRR14333326 = col_integer(),
SRR14333327 = col_integer()
))
treatmentinfo <- read_csv("treatmentinfo_merged.csv")
# Identify columns that need to be renamed (7 onward)
old_names <- colnames(gcount_raw)[7:ncol(gcount_raw)]
# Match old names with new_names in treatmentinfo
new_names <- treatmentinfo$new_names[match(old_names, treatmentinfo$sampleID)]
# Define column ranges
spis_spat_cols <- 34:36  # Current positions of Spis spat
spis_larvae_cols <- 40:42  # Current positions of Spis larvae
View(gcount_raw)
# Swap the columns by reordering
# Define column ranges
spis_spat_cols <- 34:36  # Current positions of Spis spat
spis_larvae_cols <- 40:42  # Current positions of Spis larvae
# Swap the columns
gcount_raw <- gcount_raw[, c(1:33, spis_larvae_cols, 37:39, spis_spat_cols)]
#Now I'm making a dataframe and calling Orthogroup rownames
gcount_raw <- as.data.frame(gcount_raw)
rownames(gcount_raw) <- gcount_raw$Orthogroup  # If gene IDs are in a column
View(gcount_raw)
# Load necessary library
library(readr)
# Read the CSV file with specified column types
gcount_raw <- read_csv("merged_data_acropora_montipora_pocillopora_spis.csv",
col_types = cols(
DRR318288 = col_integer(),
DRR318289 = col_integer(),
DRR318291 = col_integer(),
DRR318293 = col_integer(),
DRR318294 = col_integer(),
DRR318295 = col_integer(),
DRR318297 = col_integer(),
DRR318298 = col_integer(),
DRR318299 = col_integer(),
AH1 = col_integer(),
AH2 = col_integer(),
SRR14333320 = col_integer(),
SRR14333321 = col_integer(),
SRR14333322 = col_integer(),
SRR14333323 = col_integer(),
SRR14333324 = col_integer(),
SRR14333325 = col_integer(),
SRR14333326 = col_integer(),
SRR14333327 = col_integer()
))
View(gcount_raw)
treatmentinfo <- read_csv("treatmentinfo_merged.csv")
View(treatmentinfo)
# Identify columns that need to be renamed (7 onward)
old_names <- colnames(gcount_raw)[7:ncol(gcount_raw)]
# Match old names with new_names in treatmentinfo
new_names <- treatmentinfo$new_names[match(old_names, treatmentinfo$sampleID)]
View(gcount_raw)
# Identify columns that need to be renamed (7 onward)
old_names <- colnames(gcount_raw)[7:ncol(gcount_raw)]
# Match old names with new_names in treatmentinfo
new_names <- treatmentinfo$new_names[match(old_names, treatmentinfo$sampleID)]
View(gcount_raw)
# Replace only the column names from column 7 onward
colnames(gcount_raw)[7:ncol(gcount_raw)] <- ifelse(is.na(new_names), old_names, new_names)
View(gcount_raw)
# Define column ranges
spis_spat_cols <- 34:36  # Current positions of Spis spat
spis_larvae_cols <- 40:42  # Current positions of Spis larvae
# Swap the columns by reordering
# Define column ranges
spis_spat_cols <- 34:36  # Current positions of Spis spat
spis_larvae_cols <- 40:42  # Current positions of Spis larvae
# Swap the columns
gcount_raw <- gcount_raw[, c(1:33, spis_larvae_cols, 37:39, spis_spat_cols)]
#Now I'm making a dataframe and calling Orthogroup rownames
gcount_raw <- as.data.frame(gcount_raw)
rownames(gcount_raw) <- gcount_raw$Orthogroup  # If gene IDs are in a column
# Extract only the count data (columns 7 to 42)
gcount <- gcount_raw[, 7:42]
View(gcount_raw)
# Set filter values for PoverA
filt <- filterfun(pOverA(0.083, 10))
# Apply filter to count data only
gfilt <- genefilter(gcount, filt)
# Identify genes to keep by count filter
gkeep <- gcount[gfilt, ]
# Identify gene names to keep
gn.keep <- rownames(gkeep)
# Subset the original dataset to keep metadata and filtered count data
gcount_filt <- gcount[rownames(gcount) %in% gn.keep, ]
# Check how many rows before and after filtering
nrow(gcount)  # Before filtering
#7129
nrow(gcount_filt) # After filtering
if ("sva" %in% rownames(installed.packages()) == 'FALSE') BiocManager::install("sva")
# Load necessary library
library(readr)
View(gcount_raw)
View(gcount_filt)
View(treatmentinfo)
# Load necessary library
library(sva)
# Ensure row names of treatmentinfo match column names of gcount_filt
rownames(treatmentinfo) <- treatmentinfo$new_names
# Extract batch information (Species)
batch_info <- treatmentinfo[colnames(gcount_filt), "Species"]
View(batch_info)
# Convert count matrix to numeric
gcount_filt <- as.matrix(gcount_filt)
# Apply ComBat-seq
gcount_corrected <- ComBat_seq(counts = gcount_filt, batch = as.factor(batch_info), group = NULL)
# Check the adjusted count matrix
head(gcount_corrected)
# Convert treatmentinfo to a dataframe (avoid tibble issues)
treatmentinfo <- as.data.frame(treatmentinfo)
# Ensure gcount_filt is a matrix
gcount_filt <- as.matrix(gcount_filt)
# Extract batch information correctly (align column names with new_names)
batch_info <- treatmentinfo$Species[match(colnames(gcount_filt), treatmentinfo$new_names)]
# Ensure batch_info is a factor
batch_info <- as.factor(batch_info)
# Apply ComBat-seq batch correction
gcount_corrected <- ComBat_seq(counts = gcount_filt, batch = batch_info, group = NULL)
# Check the adjusted count matrix
head(gcount_corrected)
View(gcount_corrected)
View(gcount_filt)
#Merge the timepoint columns into a new column, group. Set group as a factor.
treatmentinfo$timepoint <- factor(treatmentinfo$timepoint, levels = c("I","II","III"))
treatmentinfo$Species <- factor(treatmentinfo$Species, levels = c("Acropora_tenuis", "Montipora_capitata", "Pocillopora_acuta","Stylophora_pistillata"))
gdds <- DESeqDataSetFromMatrix(countData = gcount_corrected,
colData = treatmentinfo,
design = ~ Species * timepoint)
SF.gdds <- estimateSizeFactors( gdds ) #estimate size factors to determine if we can use vst  to transform our data. Size factors should be less than for to use vst
print(sizeFactors(SF.gdds)) #View size factors
gvst <- vst(gdds, blind=FALSE) #apply a variance stabilizing transforamtion to minimize effects of small counts and normalize wrt library size
View(gvst)
datExpr <- as.data.frame(t(assay(gvst))) #transpose to output to a new data frame with the column names as row names. And make all data numeric
#Check for genes and samples with too many missing values with goodSamplesGenes. There shouldn't be any because we performed pre-filtering
gsg = goodSamplesGenes(datExpr, verbose = 3)
gsg$allOK #Should return TRUE if not, the R chunk below will take care of flagged data
sampleTree = hclust(dist(datExpr), method = "average")
#Plot the sample tree
pdf(paste0('sampleTree_ComBat','.pdf'))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
dev.off()
#PCA--------------------------------------------------------------------------------------------------------------
gPCAdata <- plotPCA(gvst, intgroup = c("timepoint", "Species"), returnData=TRUE, ntop=5000)
percentVar <- round(100 * attr(gPCAdata, "percentVar"))
# Ensure timepoint and species are factors with correct levels
gPCAdata$timepoint <- factor(gPCAdata$timepoint, levels = c("I", "II", "III"))
gPCAdata$Species <- factor(gPCAdata$Species, levels = c("Acropora_tenuis", "Montipora_capitata", "Pocillopora_acuta", "Stylophora_pistillata"))
# Create PCA visualization
allgenesfilt_PCA_visual <-
ggplot(data = gPCAdata, aes(x = PC1, y = PC2, color = timepoint, shape = Species)) +
geom_point(size = 5) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
ylim(-50, 50) +
coord_fixed() +
theme_classic() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.background = element_blank()
) +
scale_shape_manual(values = c(15, 16, 17, 18)) # Different shapes for each species
# Print the PCA plot
print(allgenesfilt_PCA_visual)
