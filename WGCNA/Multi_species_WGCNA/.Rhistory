) +
scale_color_manual(values = c("Pocillopora damicornis" = "pink",
"Stylophora pistillata" = "cyan")) +  # Custom species colors
theme_minimal() +  # Minimal theme for cleaner look
theme(
legend.title = element_blank(),  # Remove legend title
legend.text = element_markdown()  # Apply markdown formatting for legend text (for italics)
) +
scale_x_continuous(labels = scales::comma)  # Format x-axis with commas if needed
#MIN YII
# Whole dataset plot
# Data
data <- read_csv("C:/Users/amurg/Downloads/combined_CMSI.csv")
# Convert Date column to proper Date format
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
# Add a Species column based on the Colony column
data <- data %>%
mutate(Species = ifelse(grepl("^Sp", Colony), "Stylophora pistillata",
ifelse(grepl("^Pd", Colony), "Pocillopora damicornis", NA)))
# Whole dataset plot
# Data
data <- read_csv("C:/Users/amurg/Downloads/combined_CMSI.csv")
# Convert Date column to proper Date format
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
# Add a Species column based on the Colony column
data <- data %>%
mutate(Species = ifelse(grepl("^Sp", Colony), "Stylophora pistillata",
ifelse(grepl("^Pd", Colony), "Pocillopora damicornis", NA)))
# Calculate maximum YII per colony and per day
# Filter out groups with all NA YII values before summarizing
# Filter out groups with all NA YII values before summarizing, and only keep YII values <= 1
max_yii <- data %>%
group_by(Date, Colony, Species) %>%
filter(!all(is.na(YII)) & !is.na(Species)) %>%  # Exclude groups with NA YII or Species
summarise(Max_YII = max(YII, na.rm = TRUE), .groups = "drop") %>%
filter(Max_YII <= 1)  # Only keep values where Max_YII is less than or equal to 1
summary(max_yii)
table(max_yii$Species, useNA = "ifany")
# Define summer start and end dates for each year
summer_dates <- data.frame(
xmin = as.Date(c("2021-06-21", "2022-06-21", "2023-06-21", "2024-06-21")),
xmax = as.Date(c("2021-09-22", "2022-09-22", "2023-09-22", "2024-09-22"))
)
# Create the plot with species-based coloring and month-year labels
ggplot(max_yii, aes(x = Date, y = Max_YII, color = Species, group = Species)) +
geom_rect(data = summer_dates, aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE, fill = "#D3D3D3", alpha = 0.2, color = NA) +
geom_smooth(alpha = 0.1, span = 0.1) +
scale_color_manual(
values = c("Stylophora pistillata" = "cyan2", "Pocillopora damicornis" = "hotpink1"),
labels = c(
"Stylophora pistillata" = "*Stylophora pistillata*",
"Pocillopora damicornis" = "*Pocillopora damicornis*"
)
) +
scale_x_date(
date_breaks = "3 months",               # Show fewer breaks
date_labels = "%b\n%Y",                # Display month and year stacked
expand = c(0, 0)                       # Optional: Remove extra padding
) +
labs(
title = "Daily Maximum Yield (YII) Per Species",
x = "Date",
y = "Daily Maximum  YII"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
legend.text = element_markdown(),
axis.text.x = element_text(angle = 45, hjust = 1) # Rotate labels for clarity
)
# Create the plot with species-based coloring and month-year labels
ggplot(max_yii, aes(x = Date, y = Max_YII, color = Species, group = Species)) +
geom_rect(data = summer_dates, aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE, fill = "#D3D3D3", alpha = 0.2, color = NA) +
geom_smooth(alpha = 0.1, span = 0.1) +
scale_color_manual(
values = c("Stylophora pistillata" = "cyan2", "Pocillopora damicornis" = "hotpink1"),
labels = c(
"Stylophora pistillata" = "*Stylophora pistillata*",
"Pocillopora damicornis" = "*Pocillopora damicornis*"
)
) +
scale_x_date(
date_breaks = "3 months",               # Show fewer breaks
date_labels = "%b\n%Y",                # Display month and year stacked
expand = c(0, 0)                       # Optional: Remove extra padding
) +
labs(
title = "Daily Maximum Yield (YII) Per Species",
x = "Date",
y = "Daily Maximum YII"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
legend.text = element_markdown(size = 12),           # Increase legend text size
axis.text.x = element_text(size = 12, angle = 45, hjust = 1), # Increase x-axis text size
axis.text.y = element_text(size = 12),              # Increase y-axis text size
axis.title.x = element_text(size = 14),             # Increase x-axis title size
axis.title.y = element_text(size = 14),             # Increase y-axis title size
plot.title = element_text(size = 16, face = "bold") # Increase plot title size
)
# Create the plot with species-based coloring and month-year labels
# Create the plot with species-based coloring and month-year labels
ggplot(avg_yii, aes(x = Date, y = Avg_YII, color = Species, group = Species)) +
geom_rect(data = summer_dates, aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE, fill = "#D3D3D3", alpha = 0.2, color = NA) +
geom_smooth(alpha = 0.1, span = 0.1) +
scale_color_manual(
values = c("Stylophora pistillata" = "cyan2", "Pocillopora damicornis" = "hotpink1"),
labels = c(
"Stylophora pistillata" = "*Stylophora pistillata*",
"Pocillopora damicornis" = "*Pocillopora damicornis*"
)
) +
scale_x_date(
date_breaks = "3 months",               # Show fewer breaks
date_labels = "%b\n%Y",                # Display month and year stacked
expand = c(0, 0)                       # Optional: Remove extra padding
) +
labs(
title = "Daily Average Yield (YII) Per Species",
x = "Date",
y = "Daily Average YII"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
legend.text = element_markdown(size = 12),           # Increase legend text size
axis.text.x = element_text(size = 12, angle = 45, hjust = 1), # Increase x-axis text size
axis.text.y = element_text(size = 12),              # Increase y-axis text size
axis.title.x = element_text(size = 14),             # Increase x-axis title size
axis.title.y = element_text(size = 14),             # Increase y-axis title size
plot.title = element_text(size = 16, face = "bold") # Increase plot title size
)
# Calculate average YII per colony and per day
# Filter out groups with all NA YII values before summarizing, and only keep YII values <= 1
avg_yii <- data %>%
group_by(Date, Colony, Species) %>%
filter(!all(is.na(YII)) & !is.na(Species)) %>%  # Exclude groups with NA YII or Species
summarise(Avg_YII = mean(YII, na.rm = TRUE), .groups = "drop") %>%
filter(Avg_YII <= 1)  # Only keep values where Avg_YII is less than or equal to 1
summary(avg_yii)
table(avg_yii$Species, useNA = "ifany")
# Define summer start and end dates for each year
summer_dates <- data.frame(
xmin = as.Date(c("2021-06-21", "2022-06-21", "2023-06-21", "2024-06-21")),
xmax = as.Date(c("2021-09-22", "2022-09-22", "2023-09-22", "2024-09-22"))
)
# Create the plot with species-based coloring and month-year labels
# Create the plot with species-based coloring and month-year labels
ggplot(avg_yii, aes(x = Date, y = Avg_YII, color = Species, group = Species)) +
geom_rect(data = summer_dates, aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE, fill = "#D3D3D3", alpha = 0.2, color = NA) +
geom_smooth(alpha = 0.1, span = 0.1) +
scale_color_manual(
values = c("Stylophora pistillata" = "cyan2", "Pocillopora damicornis" = "hotpink1"),
labels = c(
"Stylophora pistillata" = "*Stylophora pistillata*",
"Pocillopora damicornis" = "*Pocillopora damicornis*"
)
) +
scale_x_date(
date_breaks = "3 months",               # Show fewer breaks
date_labels = "%b\n%Y",                # Display month and year stacked
expand = c(0, 0)                       # Optional: Remove extra padding
) +
labs(
title = "Daily Average Yield (YII) Per Species",
x = "Date",
y = "Daily Average YII"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
legend.text = element_markdown(size = 12),           # Increase legend text size
axis.text.x = element_text(size = 12, angle = 45, hjust = 1), # Increase x-axis text size
axis.text.y = element_text(size = 12),              # Increase y-axis text size
axis.title.x = element_text(size = 14),             # Increase x-axis title size
axis.title.y = element_text(size = 14),             # Increase y-axis title size
plot.title = element_text(size = 16, face = "bold") # Increase plot title size
)
# Create the plot with species-based coloring and month-year labels
# Create the plot with species-based coloring and month-year labels
ggplot(avg_yii, aes(x = Date, y = Avg_YII, color = Species, group = Species)) +
geom_rect(data = summer_dates, aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE, fill = "#D3D3D3", alpha = 0.2, color = NA) +
geom_smooth(alpha = 0.1, span = 0.1) +
scale_color_manual(
values = c("Stylophora pistillata" = "cyan2", "Pocillopora damicornis" = "hotpink1"),
labels = c(
"Stylophora pistillata" = "*Stylophora pistillata*",
"Pocillopora damicornis" = "*Pocillopora damicornis*"
)
) +
scale_x_date(
date_breaks = "3 months",               # Show fewer breaks
date_labels = "%b\n%Y",                # Display month and year stacked
expand = c(0, 0)                       # Optional: Remove extra padding
) +
labs(
title = "Daily Average Yield (YII) Per Species",
x = "Date",
y = "Daily Average YII"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
legend.text = element_markdown(size = 14),           # Increase legend text size
axis.text.x = element_text(size = 14, angle = 45, hjust = 1), # Increase x-axis text size
axis.text.y = element_text(size = 14),              # Increase y-axis text size
axis.title.x = element_text(size = 16),             # Increase x-axis title size
axis.title.y = element_text(size = 16),             # Increase y-axis title size
plot.title = element_text(size = 18, face = "bold") # Increase plot title size
)
setwd("C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/WGCNA/Multi_species_WGCNA")
R.version.string
# Read the CSV file with specified column types
gcount_raw <- read_csv("merged_data_acropora_montipora_pocillopora_spis.csv",
col_types = cols(
DRR318288 = col_integer(),
DRR318289 = col_integer(),
DRR318291 = col_integer(),
DRR318293 = col_integer(),
DRR318294 = col_integer(),
DRR318295 = col_integer(),
DRR318297 = col_integer(),
DRR318298 = col_integer(),
DRR318299 = col_integer(),
AH1 = col_integer(),
AH2 = col_integer(),
SRR14333320 = col_integer(),
SRR14333321 = col_integer(),
SRR14333322 = col_integer(),
SRR14333323 = col_integer(),
SRR14333324 = col_integer(),
SRR14333325 = col_integer(),
SRR14333326 = col_integer(),
SRR14333327 = col_integer()
))
treatmentinfo <- read_csv("treatmentinfo_merged.csv")
#Renaming columns so they're more manageable
# Identify columns that need to be renamed (7 onward)
old_names <- colnames(gcount_raw)[7:ncol(gcount_raw)]
# Match old names with new_names in treatmentinfo
new_names <- treatmentinfo$new_names[match(old_names, treatmentinfo$sampleID)]
# Replace only the column names from column 7 onward
colnames(gcount_raw)[7:ncol(gcount_raw)] <- ifelse(is.na(new_names), old_names, new_names)
#Switching the order for Spis spat
# Define column ranges
spis_spat_cols <- 34:36  # Current positions of Spis spat
spis_larvae_cols <- 40:42  # Current positions of Spis larvae
# Swap the columns by reordering
# Define column ranges
spis_spat_cols <- 34:36  # Current positions of Spis spat
spis_larvae_cols <- 40:42  # Current positions of Spis larvae
# Swap the columns
gcount_raw <- gcount_raw[, c(1:33, spis_larvae_cols, 37:39, spis_spat_cols)]
#Now I'm making a dataframe and calling Orthogroup rownames
gcount_raw <- as.data.frame(gcount_raw)
rownames(gcount_raw) <- gcount_raw$Orthogroup  # If gene IDs are in a column
# Extract only the count data (columns 7 to 42)
gcount <- gcount_raw[, 7:42]
# Set filter values for PoverA
filt <- filterfun(pOverA(0.083, 10))
# Apply filter to count data only
gfilt <- genefilter(gcount, filt)
# Identify genes to keep by count filter
gkeep <- gcount[gfilt, ]
# Identify gene names to keep
gn.keep <- rownames(gkeep)
# Subset the original dataset to keep metadata and filtered count data
gcount_filt <- gcount[rownames(gcount) %in% gn.keep, ]
# Check how many rows before and after filtering
nrow(gcount)  # Before filtering
#7129
nrow(gcount_filt) # After filtering
#7118
#Now I'm going to try to remove batch effects because it's looking a little tetric right now. I'm trying Combat-Seq
# Load necessary library
library(sva)
library(dplyr)  # Ensure dplyr is loaded for data manipulation
# Convert treatmentinfo to a dataframe (avoid tibble issues)
treatmentinfo <- as.data.frame(treatmentinfo)
# Read the CSV file with specified column types
gcount_raw <- read_csv("merged_data_acropora_montipora_pocillopora_spis.csv",
col_types = cols(
DRR318288 = col_integer(),
DRR318289 = col_integer(),
DRR318291 = col_integer(),
DRR318293 = col_integer(),
DRR318294 = col_integer(),
DRR318295 = col_integer(),
DRR318297 = col_integer(),
DRR318298 = col_integer(),
DRR318299 = col_integer(),
AH1 = col_integer(),
AH2 = col_integer(),
SRR14333320 = col_integer(),
SRR14333321 = col_integer(),
SRR14333322 = col_integer(),
SRR14333323 = col_integer(),
SRR14333324 = col_integer(),
SRR14333325 = col_integer(),
SRR14333326 = col_integer(),
SRR14333327 = col_integer()
))
# Load necessary library
library(readr)
# Read the CSV file with specified column types
gcount_raw <- read_csv("merged_data_acropora_montipora_pocillopora_spis.csv",
col_types = cols(
DRR318288 = col_integer(),
DRR318289 = col_integer(),
DRR318291 = col_integer(),
DRR318293 = col_integer(),
DRR318294 = col_integer(),
DRR318295 = col_integer(),
DRR318297 = col_integer(),
DRR318298 = col_integer(),
DRR318299 = col_integer(),
AH1 = col_integer(),
AH2 = col_integer(),
SRR14333320 = col_integer(),
SRR14333321 = col_integer(),
SRR14333322 = col_integer(),
SRR14333323 = col_integer(),
SRR14333324 = col_integer(),
SRR14333325 = col_integer(),
SRR14333326 = col_integer(),
SRR14333327 = col_integer()
))
treatmentinfo <- read_csv("treatmentinfo_merged.csv")
# Identify columns that need to be renamed (7 onward)
old_names <- colnames(gcount_raw)[7:ncol(gcount_raw)]
# Match old names with new_names in treatmentinfo
new_names <- treatmentinfo$new_names[match(old_names, treatmentinfo$sampleID)]
# Replace only the column names from column 7 onward
colnames(gcount_raw)[7:ncol(gcount_raw)] <- ifelse(is.na(new_names), old_names, new_names)
# Define column ranges
spis_spat_cols <- 34:36  # Current positions of Spis spat
spis_larvae_cols <- 40:42  # Current positions of Spis larvae
# Swap the columns by reordering
# Define column ranges
spis_spat_cols <- 34:36  # Current positions of Spis spat
spis_larvae_cols <- 40:42  # Current positions of Spis larvae
# Swap the columns
gcount_raw <- gcount_raw[, c(1:33, spis_larvae_cols, 37:39, spis_spat_cols)]
#Now I'm making a dataframe and calling Orthogroup rownames
gcount_raw <- as.data.frame(gcount_raw)
rownames(gcount_raw) <- gcount_raw$Orthogroup  # If gene IDs are in a column
# Extract only the count data (columns 7 to 42)
gcount <- gcount_raw[, 7:42]
# Set filter values for PoverA
filt <- filterfun(pOverA(0.083, 10))
# Apply filter to count data only
gfilt <- genefilter(gcount, filt)
# Identify genes to keep by count filter
gkeep <- gcount[gfilt, ]
# Identify gene names to keep
gn.keep <- rownames(gkeep)
# Subset the original dataset to keep metadata and filtered count data
gcount_filt <- gcount[rownames(gcount) %in% gn.keep, ]
# Check how many rows before and after filtering
nrow(gcount)  # Before filtering
#7129
nrow(gcount_filt) # After filtering
# Load necessary library
library(sva)
library(dplyr)  # Ensure dplyr is loaded for data manipulation
# Convert treatmentinfo to a dataframe (avoid tibble issues)
treatmentinfo <- as.data.frame(treatmentinfo)
View(gcount_filt)
gdds <- DESeqDataSetFromMatrix(countData = gfilt,
colData = treatmentinfo,
design = ~ Species * timepoint)
gdds <- DESeqDataSetFromMatrix(countData = gfilt,
colData = treatmentinfo,
design = ~ Species * timepoint)
library("tidyverse")
library("genefilter")
library("DESeq2")
library("RColorBrewer")
library("WGCNA")
library("flashClust")
library("gridExtra")
library("ComplexHeatmap")
library("goseq")
library("clusterProfiler")
library("pheatmap")
library("magrittr")
library("vegan")
library("factoextra")
library("dplyr")
library("dendsort")
library("NbClust")
library("simplifyEnrichment")
library("factoextra")
library("VennDiagram")
library("patchwork")
library("dendsort")
library("ggplot2")
library("dplyr")
library("sva")
library("DESeq2")
gdds <- DESeqDataSetFromMatrix(countData = gfilt,
colData = treatmentinfo,
design = ~ Species * timepoint)
gdds <- DESeqDataSetFromMatrix(countData = gfilt,
colData = treatmentinfo,
design = ~ Species * timepoint)
gdds <- DESeqDataSetFromMatrix(countData = gcount_filt,
colData = treatmentinfo,
design = ~ Species * timepoint)
summary(gcount_filt)
SF.gdds <- estimateSizeFactors( gdds ) #estimate size factors to determine if we can use vst  to transform our data. Size factors should be less than for to use vst
print(sizeFactors(SF.gdds)) #View size factors
View(treatmentinfo)
gvst <- vst(gdds, blind=FALSE) #apply a variance stabilizing transforamtion to minimize effects of small counts and normalize wrt library size
View(gvst)
datExpr <- as.data.frame(t(assay(gvst))) #transpose to output to a new data frame with the column names as row names. And make all data numeric
datExpr <- as.data.frame(t(assay(gvst))) #transpose to output to a new data frame with the column names as row names. And make all data numeric
# Assuming gvst is your DESeqDataSet object after VST transformation
library(limma)
# Transpose the VST data (genes as rows, samples as columns)
datExpr <- as.data.frame(t(assay(gvst)))  # Ensure all data is numeric
View(datExpr)
# Use the Species column as the batch variable
batch <- treatmentinfo$Species  # Species is your batch column
# Remove batch effects and overwrite datExpr
datExpr <- removeBatchEffect(datExpr, batch = batch)
# Convert the VST-transformed data to a dataframe directly (genes as rows, samples as columns)
vst_counts <- as.data.frame(assay(gvst))  # no need for transpose
# Align the batch information with the sample names in vst_counts
batch_info <- treatmentinfo$Species[match(colnames(vst_counts), treatmentinfo$new_names)]
# Ensure batch_info is a factor
batch_info <- as.factor(batch_info)
# Remove batch effects using removeBatchEffect
vst_counts_corrected <- removeBatchEffect(vst_counts, batch = batch_info)
View(vst_counts_corrected)
View(vst_counts_corrected)
# If you want to transpose the corrected data (samples as rows, genes as columns) for downstream analyses
datExpr <- as.data.frame(t(vst_counts_corrected))
View(datExpr)
# Ensure timepoint and species are factors with correct levels
gPCAdata$timepoint <- factor(gPCAdata$timepoint, levels = c("I", "II", "III"))
#PCA--------------------------------------------------------------------------------------------------------------
gPCAdata <- plotPCA(gvst, intgroup = c("timepoint", "Species"), returnData=TRUE, ntop=500)
percentVar <- round(100 * attr(gPCAdata, "percentVar"))
# Ensure timepoint and species are factors with correct levels
gPCAdata$timepoint <- factor(gPCAdata$timepoint, levels = c("I", "II", "III"))
gPCAdata$Species <- factor(gPCAdata$Species, levels = c("Acropora_tenuis", "Montipora_capitata", "Pocillopora_acuta", "Stylophora_pistillata"))
# Create PCA visualization
allgenesfilt_PCA_visual <-
ggplot(data = gPCAdata, aes(x = PC1, y = PC2, color = timepoint, shape = Species)) +
geom_point(size = 5) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
theme_classic() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.background = element_blank()
) +
scale_shape_manual(values = c(15, 16, 17, 18)) # Different shapes for each species
# Print the PCA plot
print(allgenesfilt_PCA_visual)
#PCA--------------------------------------------------------------------------------------------------------------
gPCAdata <- plotPCA(vst_counts_corrected, intgroup = c("timepoint", "Species"), returnData=TRUE, ntop=500)
#PCA--------------------------------------------------------------------------------------------------------------
# Create DESeqDataSet from vst_counts_corrected
colData <- data.frame(
timepoint = treatmentinfo$timepoint[match(colnames(vst_counts_corrected), treatmentinfo$new_names)],
Species = treatmentinfo$Species[match(colnames(vst_counts_corrected), treatmentinfo$new_names)]
)
# Make sure colData is a dataframe with correct sample metadata
dds_corrected <- DESeqDataSetFromMatrix(countData = vst_counts_corrected, colData = colData, design = ~ timepoint + Species)
# Make sure colData is a dataframe with correct sample metadata
dds_corrected <- DESeqDataSetFromMatrix(countData = vst_counts_corrected, colData = colData, design = ~ timepoint + Species)
# Perform PCA on vst_counts_corrected (transformed data)
pca_result <- prcomp(t(vst_counts_corrected), scale = TRUE)  # Transpose to put samples as rows
# Get PCA data for plotting
gPCAdata <- data.frame(pca_result$x)
gPCAdata$timepoint <- treatmentinfo$timepoint[match(rownames(gPCAdata), treatmentinfo$new_names)]
gPCAdata$Species <- treatmentinfo$Species[match(rownames(gPCAdata), treatmentinfo$new_names)]
# Calculate percentage variance explained by each principal component
percentVar <- round(100 * (pca_result$sdev^2) / sum(pca_result$sdev^2))
# Ensure timepoint and species are factors with correct levels
gPCAdata$timepoint <- factor(gPCAdata$timepoint, levels = c("I", "II", "III"))
gPCAdata$Species <- factor(gPCAdata$Species, levels = c("Acropora_tenuis", "Montipora_capitata", "Pocillopora_acuta", "Stylophora_pistillata"))
# Create PCA visualization
allgenesfilt_PCA_visual <-
ggplot(data = gPCAdata, aes(x = PC1, y = PC2, color = timepoint, shape = Species)) +
geom_point(size = 5) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
theme_classic() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.background = element_blank()
) +
scale_shape_manual(values = c(15, 16, 17, 18))
# Print PCA plot
print(allgenesfilt_PCA_visual)
