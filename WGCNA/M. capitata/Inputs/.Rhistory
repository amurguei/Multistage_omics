library(readr)
# Define file path
file_path <- "C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/calcification/Orthogroups.tsv"
# Read the file
orthogroups <- read_tsv(file_path)
# Define file path
file_path <- "C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/calcification/Orthogroups.tsv"
# Read the file
orthogroups <- read_tsv(file_path)
# Preview data
glimpse(orthogroups)
# Load the readr package
library(readr)
# Preview data
glimpse(orthogroups)
library(tidyverse)
# Define file path
file_path <- "C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/calcification/Orthogroups.tsv"
# Preview data
glimpse(orthogroups)
View(orthogroups)
orthogroups <- orthogroups %>%
rename(calcification_gene = `Latest_AmilRS_AdiTakeuchi_SpisPeled_SpisDrake_SpisManju_extras.FIX (5)`)
orthogroups <- orthogroups %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
View(orthogroups)
# Count how many gene IDs are in each row's calcification_gene column
orthogroups_one_calc_gene <- orthogroups %>%
filter(!is.na(calcification_gene) & calcification_gene != "") %>%
filter(sapply(strsplit(calcification_gene, ",| "), function(x) length(x[x != ""])) == 1)
View(orthogroups_one_calc_gene)
getwd()
setwd("C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/4 species")
# Read the Biomin toolkit path file
annotation_data <- read_csv("C:/Users/amurg/Downloads/Biomineralization Toolkit_2_2021-nov-24.xlsx - data.csv")
View(annotation_data)
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `query id`,
annotation_NCBI = `annotation stylophora NCBI`
) %>%
select(calcification_gene, annotation_NCBI) %>%
View(annotation_data)
# Read the Biomin toolkit path file
annotation_data <- read_csv("C:/Users/amurg/Downloads/Biomineralization Toolkit_2_2021-nov-24.xlsx - data.csv")
View(annotation_data)
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `query id`,
annotation_NCBI = `annotation stylophora NCBI`
) %>%
select(calcification_gene, annotation_NCBI) %>%
View(annotation_data)
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `query id`,
annotation_NCBI = `annotation stylophora NCBI`
) %>%
select(calcification_gene, annotation_NCBI) %>%
# Read the Biomin toolkit path file
annotation_data <- read_csv("C:/Users/amurg/Downloads/Biomineralization Toolkit_2_2021-nov-24.xlsx - data.csv")
# Read the Biomin toolkit path file
annotation_data <- read_csv("C:/Users/amurg/Downloads/Biomineralization Toolkit_2_2021-nov-24.xlsx - data.csv")
View(annotation_data)
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `query id`,
annotation_NCBI = `annotation stylophora NCBI`
) %>%
select(calcification_gene, annotation_NCBI) %>%
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `query id`,
annotation_NCBI = `annotation stylophora NCBI`
) %>%
select(calcification_gene, annotation_NCBI) %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
View(annotation_data)
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `qyery id`,
annotation_NCBI = `annotation stylophora NCBI`
) %>%
select(calcification_gene, annotation_NCBI) %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
View(annotation_data)
View(annotation_data)
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `qyery id`,
product_stylophora_NCBI = `product stylophora NCBI`
) %>%
select(calcification_gene, annotation_NCBI) %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
# Read the Biomin toolkit path file
annotation_data <- read_csv("C:/Users/amurg/Downloads/Biomineralization Toolkit_2_2021-nov-24.xlsx - data.csv")
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `qyery id`,
product_stylophora_NCBI = `product stylophora NCBI`
) %>%
select(calcification_gene, annotation_NCBI) %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `qyery id`,
product_stylophora_NCBI = `product stylophora NCBI`
) %>%
select(calcification_gene, product_stylophora_NCBI) %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
View(annotation_data)
# Join to full orthogroups
orthogroups_annotated <- orthogroups %>%
left_join(annotation_data, by = "calcification_gene")
# Join to filtered one-gene orthogroups
orthogroups_one_calc_gene_annotated <- orthogroups_one_calc_gene %>%
left_join(annotation_data, by = "calcification_gene")
View(orthogroups_one_calc_gene_annotated)
setwd("C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/4 species/Orthogroups")
setwd("C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/calcification/Orthogroups")
# Read the Biomin toolkit path file
annotation_data <- read_csv("C:/Users/amurg/Downloads/Biomineralization Toolkit_2_2021-nov-24.xlsx - data.csv")
# Define file path
file_path <- "C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/calcification/Orthogroups/Orthogroups.tsv"
# Read the file
orthogroups <- read_tsv(file_path)
# Preview data
glimpse(orthogroups)
#Change the name
orthogroups <- orthogroups %>%
rename(calcification_gene = `Latest_AmilRS_AdiTakeuchi_SpisPeled_SpisDrake_SpisManju_extras.FIX (5)`)
orthogroups <- orthogroups %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
setwd("C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/calcification/Orthogroups")
# Read the Biomin toolkit path file
annotation_data <- read_csv("C:/Users/amurg/Downloads/Biomineralization Toolkit_2_2021-nov-24.xlsx - data.csv")
# Define file path
file_path <- "C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/Orthogroups/calcification/Orthogroups/Orthogroups.tsv"
# Read the file
orthogroups <- read_tsv(file_path)
# Preview data
glimpse(orthogroups)
#Change the name
orthogroups <- orthogroups %>%
rename(calcification_gene = `Latest_AmilRS_AdiTakeuchi_SpisPeled_SpisDrake_SpisManju_extras.FIX (5)`)
orthogroups <- orthogroups %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
View(orthogroups)
# Count how many gene IDs are in each row's calcification_gene column
orthogroups_one_calc_gene <- orthogroups %>%
filter(!is.na(calcification_gene) & calcification_gene != "") %>%
filter(sapply(strsplit(calcification_gene, ",| "), function(x) length(x[x != ""])) == 1)
View(orthogroups_one_calc_gene)
# Clean and rename relevant columns
annotation_data <- annotation_data %>%
rename(
calcification_gene = `qyery id`,
product_stylophora_NCBI = `product stylophora NCBI`
) %>%
select(calcification_gene, product_stylophora_NCBI) %>%
filter(!is.na(calcification_gene) & calcification_gene != "")
# Join to full orthogroups
orthogroups_annotated <- orthogroups %>%
left_join(annotation_data, by = "calcification_gene")
# Join to filtered one-gene orthogroups
orthogroups_one_calc_gene_annotated <- orthogroups_one_calc_gene %>%
left_join(annotation_data, by = "calcification_gene")
View(orthogroups_one_calc_gene_annotated)
View(orthogroups_one_calc_gene)
#Now filtering by genes present in single copy in 2 sp.
# Define species columns explicitly
species_columns <- c(
"Pocillopora_acuta_HIv2.genes.pep",
"Spis.genome.annotation.pep.longest",
"Montipora_capitata_HIv3.genes.pep.faa",
"Acropora_tenuis_0.11.maker_post_001.proteins.fasta"
)
# Filter orthogroups with a calcification gene AND at least 2 species with a single gene copy
orthogroups_single_copy_2plus <- orthogroups_one_calc_gene_annotated %>%
rowwise() %>%
mutate(
single_copy_species_count = sum(sapply(across(all_of(species_columns)), function(x) {
genes <- unlist(strsplit(x, ",| "))
genes <- genes[genes != ""]  # remove empty strings
length(genes) == 1
}))
) %>%
ungroup() %>%
filter(single_copy_species_count >= 2) %>%
select(-single_copy_species_count)
#Now filtering by genes present in single copy in 2 sp.
# Define species columns explicitly
species_columns <- c(
"Pocillopora_acuta_HIv2.genes.pep",
"Spis.genome.annotation.pep.longest",
"Montipora_capitata_HIv3.genes.pep",
"Acropora_tenuis_0.11.maker_post_001.proteins"
)
# Filter orthogroups with a calcification gene AND at least 2 species with a single gene copy
orthogroups_single_copy_2plus <- orthogroups_one_calc_gene_annotated %>%
rowwise() %>%
mutate(
single_copy_species_count = sum(sapply(across(all_of(species_columns)), function(x) {
genes <- unlist(strsplit(x, ",| "))
genes <- genes[genes != ""]  # remove empty strings
length(genes) == 1
}))
) %>%
ungroup() %>%
filter(single_copy_species_count >= 2) %>%
select(-single_copy_species_count)
View(orthogroups_single_copy_2plus)
getwd()
setwd("C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/WGCNA/M. capitata/Inputs")
setwd("C:/Users/amurg/OneDrive/Documentos/GitHub/Multistage_omics/WGCNA/M. capitata/Inputs")
#Data--------------------------------------------------------------------------------------
#treatmentinfo <- read_csv("E:/Users/amurgueitio/Documents/Multistage_omics/R scripts/M. capitata/New_genome/fixed_gff/5-Mcap-SampleInfo.csv")
library(readr)
treatmentinfo <- read_csv("5-Mcap-SampleInfo.csv")
gcount <- as.data.frame(read.csv("E:/Users/amurgueitio/Documents/Multistage_omics/R scripts/M. capitata/New_genome/fixed_gff/Mcap_transcript_count_matrix.csv", row.names="gene_id"), colClasses = double, header=TRUE)
gcount <- as.data.frame(read.csv("Mcap_transcript_count_matrix.csv", row.names="gene_id"), colClasses = double, header=TRUE)
# Set filter values for PoverA
# Smallest sample size per treatment is 3, so 3/9 (9 samples) is 0.33 (rounded to 2 decimal places)
# This means that 3 out of 9 (0.33) samples need to have counts over 10.
# So P=33 percent of the samples have counts over A=10.
#there's something up with this code :( )
filt <- filterfun(pOverA(0.33, 10))
library("tidyverse")
library("genefilter")
library("DESeq2")
library("RColorBrewer")
library("WGCNA")
library("flashClust")
library("gridExtra")
library("ComplexHeatmap")
library("goseq")
library("clusterProfiler")
library("pheatmap")
library("magrittr")
library("vegan")
library("factoextra")
library("dplyr")
library("dendsort")
library("NbClust")
library("simplifyEnrichment")
library("factoextra")
library("VennDiagram")
library("patchwork")
# Set filter values for PoverA
# Smallest sample size per treatment is 3, so 3/9 (9 samples) is 0.33 (rounded to 2 decimal places)
# This means that 3 out of 9 (0.33) samples need to have counts over 10.
# So P=33 percent of the samples have counts over A=10.
#there's something up with this code :( )
filt <- filterfun(pOverA(0.33, 10))
# Create filter for the counts data
gfilt <- genefilter(gcount, filt)
# Identify genes to keep by count filter
gkeep <- gcount[gfilt,]
# Identify gene lists
gn.keep <- rownames(gkeep)
#gene count data filtered in PoverA, P percent of the samples have counts over A
gcount_filt <- as.data.frame(gcount[which(rownames(gcount) %in% gn.keep),])
#How many rows do we have before and after filtering?
nrow(gcount) #Before 54384
nrow(gcount_filt) #After 25741
#Merge Set group as a factor.
treatmentinfo$timepoint <- factor(treatmentinfo$timepoint, levels = c("I","II","III"))
#Set DESeq2 design
gdds <- DESeqDataSetFromMatrix(countData = gcount_filt,
colData = treatmentinfo,
design = ~timepoint)
SF.gdds <- estimateSizeFactors( gdds ) #estimate size factors to determine if we can use vst  to transform our data. Size factors should be less than for to use vst
print(sizeFactors(SF.gdds)) #View size factors
gvst <- vst(gdds, blind=FALSE) #apply a variance stabilizing transforamtion to minimize effects of small counts and normalize wrt library size
datExpr <- as.data.frame(t(assay(gvst))) #transpose to output to a new data frame with the column names as row names. And make all data numeric
#Check for genes and samples with too many missing values with goodSamplesGenes. There shouldn't be any because we performed pre-filtering
gsg = goodSamplesGenes(datExpr, verbose = 3)
gsg$allOK #Should return TRUE if not, the R chunk below will take care of flagged data
gPCAdata <- plotPCA(gvst, intgroup = c("timepoint"), returnData=TRUE, ntop=25741) #use ntop to specify all genes
percentVar <- round(100*attr(gPCAdata, "percentVar")) #plot PCA of samples with all data
# Creating an alignment rate table
alignment_table <- tribble(
~SampleID, ~SRR, ~AlignRate,
"AH1", "SRR14864072", 73.0,
"AH2", "SRR14864071", 80.8,
"AH3", "SRR14864070", 82.1,
"AH4", "SRR14864069", 79.9,
"AH5", "SRR14864068", 71.9,
"AH6", "SRR14864067", 73.0,
"AH7", "SRR14864066", 47.3,
"AH8", "SRR14864065", 65.0,
"AH9", "SRR14864064", 63.4
)
# Merge alignment rates into your existing sample metadata
treatmentinfo <- treatmentinfo %>%
left_join(alignment_table, by = c("sampleID" = "SampleID"))
colnames(treatmentinfo)
gdds <- DESeqDataSetFromMatrix(countData = gcount_filt,
colData = treatmentinfo,
design = ~ AlignRate + timepoint)
# Scale and center AlignRate (mean = 0, SD = 1)
treatmentinfo$AlignRate_scaled <- scale(treatmentinfo$AlignRate)
gdds <- DESeqDataSetFromMatrix(
countData = gcount_filt,
colData = treatmentinfo,
design = ~ AlignRate_scaled + timepoint
)
summary(treatmentinfo$AlignRate_scaled)
gdds <- DESeq(gdds)  # Make sure DESeq is run before VST
gvst_align <- vst(gdds, blind = FALSE)
gPCAdata_align <- plotPCA(gvst_align, intgroup = c("timepoint"), returnData = TRUE, ntop = nrow(gcount_filt))
percentVar_align <- round(100 * attr(gPCAdata_align, "percentVar"))
library(ggplot2)
ggplot(data = gPCAdata_align, aes(PC1, PC2)) +
geom_point(aes(shape = timepoint, colour = timepoint), size = 6) +
xlab(paste0("PC1: ", percentVar_align[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_align[2], "% variance")) +
ylim(-50, 50) +
coord_fixed() +
theme_classic() +
theme(
axis.text = element_text(size = 16),
axis.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.background = element_blank()
)
plot(treatmentinfo$AlignRate, gPCAdata_align$PC1, pch = 19, col = "blue",
xlab = "Alignment Rate", ylab = "PC1")
abline(lm(gPCAdata_align$PC1 ~ treatmentinfo$AlignRate), col = "red")
plot(treatmentinfo$AlignRate, gPCAdata_align$PC1, pch = 19, col = "blue",
xlab = "Alignment Rate", ylab = "PC1")
abline(lm(gPCAdata_align$PC1 ~ treatmentinfo$AlignRate), col = "red")
#Correction based on TINS
# Load TIN data
tin_data <- read.table("multiqc_tin.txt", header = TRUE)
View(tin_data)
# Rename column for clarity
colnames(tin_data) <- c("SRR", "TIN")
tin_data <- left_join(tin_data, alignment_table, by = "SRR")  # Adds SampleID column
treatmentinfo <- left_join(treatmentinfo, tin_data, by = c("sampleID" = "SampleID"))
treatmentinfo$TIN_scaled <- scale(treatmentinfo$TIN)
gdds_tin <- DESeqDataSetFromMatrix(
countData = gcount_filt,
colData = treatmentinfo,
design = ~ TIN_scaled + timepoint
)
gdds_tin <- DESeq(gdds_tin)
gvst_tin <- vst(gdds_tin, blind = FALSE)
gdds_tin <- DESeq(gdds_tin)
gvst_tin <- vst(gdds_tin, blind = FALSE)
gPCAdata_tin <- plotPCA(gvst_tin, intgroup = "timepoint", returnData = TRUE)
gPCAdata_tin <- plotPCA(gvst_tin, intgroup = "timepoint", returnData = TRUE, ntop=25741)
percentVar_tin <- round(100 * attr(gPCAdata_tin, "percentVar"))
ggplot(gPCAdata_tin, aes(PC1, PC2, color = timepoint, shape = timepoint)) +
geom_point(size = 5) +
xlab(paste0("PC1: ", percentVar_tin[1], "%")) +
ylab(paste0("PC2: ", percentVar_tin[2], "%")) +
theme_classic()
summary(pca$x[,1:2])
# Plot in ggplot
ggplot(pca_data, aes(PC1, PC2, color = timepoint, shape = timepoint)) +
geom_point(size = 6) +
xlab(paste0("PC1: ", round(100 * summary(pca)$importance[2, 1]), "% variance")) +
ylab(paste0("PC2: ", round(100 * summary(pca)$importance[2, 2]), "% variance")) +
theme_classic() +
coord_fixed() +
theme(
axis.text = element_text(size = 16),
axis.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16)
)
gPCAdata$sampleID <- rownames(gPCAdata)
gPCAdata <- left_join(gPCAdata, tin_data, by = "sampleID")
tin_data <- read.table("multiqc_tin.txt", header = TRUE, sep = "\t")
colnames(tin_data) <- c("SRR", "TIN")
# Optional: map SRR IDs to sampleIDs (if needed)
mapping <- tribble(
~sampleID, ~SRR,
"AH1", "SRR14864072",
"AH2", "SRR14864071",
"AH3", "SRR14864070",
"AH4", "SRR14864069",
"AH5", "SRR14864068",
"AH6", "SRR14864067",
"AH7", "SRR14864066",
"AH8", "SRR14864065",
"AH9", "SRR14864064"
)
tin_data <- left_join(mapping, tin_data, by = "SRR")
gPCAdata$sampleID <- rownames(gPCAdata)
gPCAdata <- left_join(gPCAdata, tin_data, by = "sampleID")
ggplot(gPCAdata, aes(PC1, PC2, color = TIN, shape = timepoint)) +
geom_point(size = 6) +
scale_color_viridis_c(option = "plasma", end = 0.95) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
theme_classic() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14)
)
# Plot
ggplot(gPCAdata, aes(PC1, PC2)) +
geom_point(aes(shape = timepoint, colour = timepoint), size = 5) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
theme_classic()
tin_data <- left_join(mapping, tin_data, by = "SRR")
gPCAdata$sampleID <- rownames(gPCAdata)
gPCAdata <- left_join(gPCAdata, tin_data, by = "sampleID")
tin_data <- read.table("multiqc_tin.txt", header = TRUE, sep = "\t")
colnames(tin_data) <- c("SRR", "TIN")
# Optional: map SRR IDs to sampleIDs (if needed)
mapping <- tribble(
~sampleID, ~SRR,
"AH1", "SRR14864072",
"AH2", "SRR14864071",
"AH3", "SRR14864070",
"AH4", "SRR14864069",
"AH5", "SRR14864068",
"AH6", "SRR14864067",
"AH7", "SRR14864066",
"AH8", "SRR14864065",
"AH9", "SRR14864064"
)
tin_data <- left_join(mapping, tin_data, by = "SRR")
gPCAdata$sampleID <- rownames(gPCAdata)
gPCAdata <- left_join(gPCAdata, tin_data, by = "sampleID")
ggplot(gPCAdata, aes(PC1, PC2, color = TIN, shape = timepoint)) +
geom_point(size = 6) +
scale_color_viridis_c(option = "plasma", end = 0.95) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
theme_classic() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14)
)
tin_data <- read.table("multiqc_tin.txt", header = TRUE, sep = "\t")
colnames(tin_data) <- c("SRR", "TIN")
# Optional: map SRR IDs to sampleIDs (if needed)
mapping <- tribble(
~sampleID, ~SRR,
"AH1", "SRR14864072",
"AH2", "SRR14864071",
"AH3", "SRR14864070",
"AH4", "SRR14864069",
"AH5", "SRR14864068",
"AH6", "SRR14864067",
"AH7", "SRR14864066",
"AH8", "SRR14864065",
"AH9", "SRR14864064"
)
tin_data <- left_join(mapping, tin_data, by = "SRR")
gPCAdata$sampleID <- rownames(gPCAdata)
gPCAdata <- left_join(gPCAdata, tin_data, by = "sampleID")
ggplot(gPCAdata, aes(PC1, PC2, color = TIN, shape = timepoint)) +
geom_point(size = 6) +
scale_color_viridis_c(option = "plasma", end = 0.95) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
theme_classic() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14)
)
# Load TIN data
tin_data <- read.table("multiqc_tin.txt", header = TRUE)
# Rename column for clarity
colnames(tin_data) <- c("SRR", "TIN")
tin_data <- left_join(tin_data, alignment_table, by = "SRR")  # Adds SampleID column
treatmentinfo <- left_join(treatmentinfo, tin_data, by = c("sampleID" = "SampleID"))
treatmentinfo$TIN_scaled <- scale(treatmentinfo$TIN)
gdds_tin <- DESeqDataSetFromMatrix(
countData = gcount_filt,
colData = treatmentinfo,
design = ~ TIN_scaled + timepoint
)
gdds_tin <- DESeq(gdds_tin)
gvst_tin <- vst(gdds_tin, blind = FALSE)
gPCAdata_tin <- plotPCA(gvst_tin, intgroup = "timepoint", returnData = TRUE, ntop=25741)
percentVar_tin <- round(100 * attr(gPCAdata_tin, "percentVar"))
ggplot(gPCAdata_tin, aes(PC1, PC2, color = timepoint, shape = timepoint)) +
geom_point(size = 5) +
xlab(paste0("PC1: ", percentVar_tin[1], "%")) +
ylab(paste0("PC2: ", percentVar_tin[2], "%")) +
theme_classic()
