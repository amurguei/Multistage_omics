# Step 2: Update labels for improved readability
pretty_labels <- parse(text = c("Larvae","Metamorphosed","Spat")
)
library(ComplexHeatmap)
library(circlize)
library(grid)
library(dendextend)
# Assume moduleTraitCor, heatmappval, METree, and htmap.colors are already defined
# Step 1: Create a rotated top dendrogram with desired order
d <- as.dendrogram(hclust(dist(t(moduleTraitCor)), method = "average"))
d_rotated <- rotate(d, order = c("Larvae", "Metamorphosed", "Spat"))
column_order_indices <- order.dendrogram(d_rotated)
# Step 2: Simplified trait labels
pretty_labels <- parse(text = c("Larvae", "Metamorphosed", "Spat"))
# Step 3: Build the heatmap
ht <- Heatmap(
matrix = moduleTraitCor,
name = "Eigengene",
column_title = "Module–Life Stage Eigengene Correlation",
col = blueWhiteRed(50),
row_names_side = "left",
row_dend_side = "left",
width = unit(4, "in"),
height = unit(8.5, "in"),
column_order = column_order_indices,
cluster_columns = d_rotated,
column_dend_reorder = FALSE,
column_labels = pretty_labels[column_order_indices],
column_dend_height = unit(0.5, "in"),
cluster_rows = METree,
row_split = 8,
row_gap = unit(2.5, "mm"),
border = TRUE,
cell_fun = function(j, i, x, y, w, h, col) {
if (heatmappval[i, j] <= 0.05) {
grid.text(sprintf("%s", heatmappval[i, j]), x, y, gp = gpar(fontsize = 8, fontface = "bold"))
} else {
grid.text(sprintf("%s", heatmappval[i, j]), x, y, gp = gpar(fontsize = 8, fontface = "plain"))
}
},
column_names_gp = gpar(fontsize = 12),
row_names_gp = gpar(fontsize = 10, alpha = 0.75, border = TRUE, fill = htmap.colors)
)
# Step 4: Output to PDF with a main title
pdf("module_trait_heatmap_final_simple_labels.pdf", width = 10, height = 10)
draw(ht)
grid.text(
"Module–Life Stage Eigengene Correlation",
x = 0.5, y = 0.97, gp = gpar(fontsize = 16, fontface = "bold")
)
dev.off()
# Assume moduleTraitCor, heatmappval, METree, and htmap.colors are already defined
# Step 1: Create a rotated top dendrogram with desired order
d <- as.dendrogram(hclust(dist(t(moduleTraitCor)), method = "average"))
d_rotated <- rotate(d, order = c("Larvae", "Metamorphosed", "Spat"))
column_order_indices <- order.dendrogram(d_rotated)
# Step 2: Simplified trait labels
pretty_labels <- parse(text = c("Larvae", "Metamorphosed", "Spat"))
# Step 3: Build the heatmap
ht <- Heatmap(
matrix = moduleTraitCor,
name = "Eigengene",
column_title = "Module–Life Stage Eigengene Correlation",
col = blueWhiteRed(50),
row_names_side = "left",
row_dend_side = "left",
width = unit(4, "in"),
height = unit(8.5, "in"),
column_order = column_order_indices,
cluster_columns = d_rotated,
column_dend_reorder = FALSE,
column_labels = pretty_labels[column_order_indices],
column_dend_height = unit(0.5, "in"),
cluster_rows = METree,
row_split = 8,
row_gap = unit(2.5, "mm"),
border = TRUE,
cell_fun = function(j, i, x, y, w, h, col) {
if (heatmappval[i, j] <= 0.05) {
grid.text(sprintf("%s", heatmappval[i, j]), x, y, gp = gpar(fontsize = 8, fontface = "bold"))
} else {
grid.text(sprintf("%s", heatmappval[i, j]), x, y, gp = gpar(fontsize = 8, fontface = "plain"))
}
},
column_names_gp = gpar(fontsize = 12),
row_names_gp = gpar(fontsize = 10, alpha = 0.75, border = TRUE, fill = htmap.colors)
)
# Step 4: Output to PDF with a main title
pdf("module_trait_heatmap_final_simple_labels.pdf", width = 8, height = 11.5)
draw(ht)
grid.text(
"Module–Life Stage Eigengene Correlation",
x = 0.5, y = 0.97, gp = gpar(fontsize = 16, fontface = "bold")
)
dev.off()
# Step 1: Rotated top dendrogram in desired order
d <- as.dendrogram(hclust(dist(t(moduleTraitCor)), method = "average"))
d_rotated <- rotate(d, order = c("Larvae", "Metamorphosed", "Spat"))
column_order_indices <- order.dendrogram(d_rotated)
# Step 2: Simplified column labels (parse for better formatting)
pretty_labels <- parse(text = c("Larvae", "Metamorphosed", "Spat"))
# Step 3: Create the heatmap object
ht <- Heatmap(
matrix = moduleTraitCor,
name = "Eigengene",
col = blueWhiteRed(50),
column_order = column_order_indices,
column_labels = pretty_labels[column_order_indices],
cluster_columns = d_rotated,
column_dend_reorder = FALSE,
column_dend_height = unit(0.5, "in"),
row_split = 8,
cluster_rows = METree,
row_gap = unit(2.5, "mm"),
row_names_side = "left",
row_dend_side = "left",
border = TRUE,
width = unit(5, "in"),
height = unit(9, "in"),
column_names_gp = gpar(fontsize = 12),
row_names_gp = gpar(fontsize = 10, alpha = 0.75, border = TRUE, fill = htmap.colors),
cell_fun = function(j, i, x, y, w, h, col) {
pval <- heatmappval[i, j]
label <- sprintf("%s", pval)
font <- if (pval <= 0.05) "bold" else "plain"
grid.text(label, x, y, gp = gpar(fontsize = 8, fontface = font))
}
)
# Step 4: Save with proper layout
pdf("module_trait_heatmap_final_simple_labels.pdf", width = 10, height = 11)
draw(
ht,
heatmap_legend_side = "right",
column_title = "Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
padding = unit(c(6, 6, 10, 6), "mm")  # Top, right, bottom, left
)
dev.off()
draw(
ht,
heatmap_legend_side = "right",
column_title = "Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
padding = unit(c(6, 6, 10, 6), "mm")  # Top, right, bottom, left
)
# Step 3: Create the heatmap object
ht <- Heatmap(
matrix = moduleTraitCor,
name = "Eigengene",
col = blueWhiteRed(50),
column_order = column_order_indices,
column_labels = pretty_labels[column_order_indices],
cluster_columns = d_rotated,
column_dend_reorder = FALSE,
column_dend_height = unit(0.5, "in"),
row_split = 8,
cluster_rows = METree,
row_gap = unit(2.5, "mm"),
row_names_side = "left",
row_dend_side = "left",
border = TRUE,
width = unit(5, "in"),
height = unit(9, "in"),
column_names_gp = gpar(fontsize = 12),
row_names_gp = gpar(fontsize = 10, alpha = 0.75, border = TRUE, fill = htmap.colors),
cell_fun = function(j, i, x, y, w, h, col) {
pval <- heatmappval[i, j]
label <- sprintf("%s", pval)
font <- if (pval <= 0.05) "bold" else "plain"
grid.text(label, x, y, gp = gpar(fontsize = 8, fontface = font))
}
)
# Step 4: Save with proper layout
pdf("module_trait_heatmap_final_simple_labels.pdf", width = 8, height = 14)
draw(
ht,
heatmap_legend_side = "right",
column_title = "Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
padding = unit(c(6, 6, 10, 6), "mm")  # Top, right, bottom, left
)
dev.off()
# Step 3: Create the heatmap object
ht <- Heatmap(
matrix = moduleTraitCor,
name = "Eigengene",
col = blueWhiteRed(50),
column_order = column_order_indices,
column_labels = pretty_labels[column_order_indices],
cluster_columns = d_rotated,
column_dend_reorder = FALSE,
column_dend_height = unit(0.5, "in"),
row_split = 8,
cluster_rows = METree,
column_names_rot = 45,
row_gap = unit(2.5, "mm"),
row_names_side = "left",
row_dend_side = "left",
border = TRUE,
width = unit(5, "in"),
height = unit(9, "in"),
column_names_gp = gpar(fontsize = 12),
row_names_gp = gpar(fontsize = 10, alpha = 0.75, border = TRUE, fill = htmap.colors),
cell_fun = function(j, i, x, y, w, h, col) {
pval <- heatmappval[i, j]
label <- sprintf("%s", pval)
font <- if (pval <= 0.05) "bold" else "plain"
grid.text(label, x, y, gp = gpar(fontsize = 8, fontface = font))
}
)
# Step 4: Save with proper layout
pdf("module_trait_heatmap_final_simple_labels.pdf", width = 8, height = 12)
draw(
ht,
heatmap_legend_side = "right",
column_title = "Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
padding = unit(c(6, 6, 10, 6), "mm")  # Top, right, bottom, left
)
dev.off()
# Step 4: Save with proper layout
pdf("sft7_module_trait_heatmap_final_simple_labels.pdf", width = 8, height = 12)
draw(
ht,
heatmap_legend_side = "right",
column_title = "Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
padding = unit(c(6, 6, 10, 6), "mm")  # Top, right, bottom, left
)
dev.off()
# Step 4: Save with proper layout
pdf("sft7_module_trait_heatmap_final_simple_labels.pdf", width = 8, height = 12)
draw(
ht,
heatmap_legend_side = "right",
column_title = "All Species Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
padding = unit(c(6, 6, 10, 6), "mm")  # Top, right, bottom, left
)
dev.off()
png("module_trait_heatmap_final_simple_labels.png",
width = 3000, height = 3300, res = 300)  # 300 DPI, large canvas
draw(
ht,
heatmap_legend_side = "right",
column_title = "Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 20, fontface = "bold"),
padding = unit(c(10, 10, 14, 10), "mm")  # More breathing room
)
png("module_trait_heatmap_final_simple_labels.png",
width = 3000, height = 3300, res = 300)  # 300 DPI, large canvas
draw(
ht,
heatmap_legend_side = "right",
column_title = "Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 20, fontface = "bold"),
padding = unit(c(10, 10, 14, 10), "mm")  # More breathing room
)
dev.off()
png("module_trait_heatmap_final_simple_labels.png",
width = 3000, height = 3300, res = 300)  # 300 DPI, large canvas
draw(
ht,
heatmap_legend_side = "right",
column_title = "All Species Module–Life Stage Eigengene Correlation",
column_title_gp = gpar(fontsize = 20, fontface = "bold"),
padding = unit(c(10, 10, 14, 10), "mm")  # More breathing room
)
dev.off()
# Create dataframe that associates module colors with clusters based on the new heatmap
MEcluster1 <- data.frame(moduleColor = c("steelblue"), moduleCluster = c(1))
MEcluster2 <- data.frame(moduleColor = c("turquoise","darkred","purple","lightgreen","darkgrey","skyblue","midnightblue","magenta","tan","darkgreen","royalblue"), moduleCluster = c(2))
MEcluster3 <- data.frame(moduleColor = c("black","grey60", "darkmagenta", "sienna3","yellow"), moduleCluster = c(3))
MEcluster4 <- data.frame(moduleColor = c("cyan","lightcyan","darkolivegreen","skyblue3"), moduleCluster = c(4))
MEcluster5 <- data.frame(moduleColor = c("brown", "pink", "red"), moduleCluster = c(5))
MEcluster6 <- data.frame(moduleColor = c("saddlebrown","darkturquoise","orange","white"), moduleCluster = c(6))
MEcluster7 <- data.frame(moduleColor = c("yellowgreen","blue","darkorange"), moduleCluster = c(7))
MEcluster8 <- data.frame(moduleColor = c("lightyellow", "salmon","violet","paleturquoise", "plum1"), moduleCluster = c(8))
moduleCluster = bind_rows(MEcluster1, MEcluster2, MEcluster3, MEcluster4, MEcluster5, MEcluster6, MEcluster7, MEcluster8, MEcluster9, MEcluster10)
moduleCluster = bind_rows(MEcluster1, MEcluster2, MEcluster3, MEcluster4, MEcluster5, MEcluster6, MEcluster7, MEcluster8)
chooseTopHubInEachModule(
datExpr,
Colors,
power = 7,
type = "signed")
chooseTopHubInEachModule(
datExpr1_centered,
Colors,
power = 7,
type = "signed")
head(moduleCluster)
head(moduleCluster)
# View module eigengene data
head(MEs)
names(MEs)
Strader_MEs <- MEs
View(treatmentinfo)
Strader_MEs$group <- treatmentinfo$group
View(Strader_MEs)
Strader_MEs$sample_id <- rownames(Strader_MEs)
head(Strader_MEs)
Strader_MEs$timepoint <- treatmentinfo$timepoint
head(Strader_MEs$sample_id)
#[1] "Larva1_Atenuis" "Larva2_Atenuis" "Larva3_Atenuis" "Meta1_Atenuis"  "Meta2_Atenuis"  "Meta3_Atenuis"
head(Strader_MEs$timepoint)
#[1] I  I  I  II II II
#Levels: I II III
head(Strader_MEs$group)
# Cluster 1
C1_Strader_MEs <- select(Strader_MEs, MEsteelblue)
C1_Strader_MEs$Mean <- rowMeans(C1_Strader_MEs)
# Cluster 2
C2_Strader_MEs <- select(Strader_MEs, MEturquoise, MEdarkred, MEpurple, MElightgreen,
MEdarkgrey, MEskyblue, MEmidnightblue, MEmagenta, MEtan,
MEdarkgreen, MEroyalblue)
C2_Strader_MEs$Mean <- rowMeans(C2_Strader_MEs)
# Cluster 3
C3_Strader_MEs <- select(Strader_MEs, MEblack, MEgrey60, MEdarkmagenta, MEsienna3, MEyellow)
C3_Strader_MEs$Mean <- rowMeans(C3_Strader_MEs)
# Cluster 4
C4_Strader_MEs <- select(Strader_MEs, MEcyan, MElightcyan, MEdarkolivegreen, MEskyblue3)
C4_Strader_MEs$Mean <- rowMeans(C4_Strader_MEs)
# Cluster 5
C5_Strader_MEs <- select(Strader_MEs, MEbrown, MEpink, MEred)
C5_Strader_MEs$Mean <- rowMeans(C5_Strader_MEs)
# Cluster 6
C6_Strader_MEs <- select(Strader_MEs, MEsaddlebrown, MEdarkturquoise, MEorange, MEwhite)
C6_Strader_MEs$Mean <- rowMeans(C6_Strader_MEs)
# Cluster 7
C7_Strader_MEs <- select(Strader_MEs, MEyellowgreen, MEblue, MEdarkorange)
C7_Strader_MEs$Mean <- rowMeans(C7_Strader_MEs)
# Cluster 8
C8_Strader_MEs <- select(Strader_MEs, MElightyellow, MEsalmon, MEviolet, MEpaleturquoise, MEplum1)
C8_Strader_MEs$Mean <- rowMeans(C8_Strader_MEs)
# Create the final dataframe with group rather than timepoint
expressionProfile_data_group <- as.data.frame(cbind(
group = Strader_MEs$group,
cluster1 = C1_Strader_MEs$Mean,
cluster2 = C2_Strader_MEs$Mean,
cluster3 = C3_Strader_MEs$Mean,
cluster4 = C4_Strader_MEs$Mean,
cluster5 = C5_Strader_MEs$Mean,
cluster6 = C6_Strader_MEs$Mean,
cluster7 = C7_Strader_MEs$Mean,
cluster8 = C8_Strader_MEs$Mean,
cluster9 = C9_Strader_MEs$Mean,
cluster10 = C10_Strader_MEs$Mean
))
# Create the final dataframe with group rather than timepoint
expressionProfile_data_group <- as.data.frame(cbind(
group = Strader_MEs$group,
cluster1 = C1_Strader_MEs$Mean,
cluster2 = C2_Strader_MEs$Mean,
cluster3 = C3_Strader_MEs$Mean,
cluster4 = C4_Strader_MEs$Mean,
cluster5 = C5_Strader_MEs$Mean,
cluster6 = C6_Strader_MEs$Mean,
cluster7 = C7_Strader_MEs$Mean,
cluster8 = C8_Strader_MEs$Mean
))
View(expressionProfile_data_group)
View(Strader_MEs)
# Create the final dataframe with group rather than timepoint
expressionProfile_data_group <- as.data.frame(cbind(
group = Strader_MEs$group,
cluster1 = C1_Strader_MEs$Mean,
cluster2 = C2_Strader_MEs$Mean,
cluster3 = C3_Strader_MEs$Mean,
cluster4 = C4_Strader_MEs$Mean,
cluster5 = C5_Strader_MEs$Mean,
cluster6 = C6_Strader_MEs$Mean,
cluster7 = C7_Strader_MEs$Mean,
cluster8 = C8_Strader_MEs$Mean
))
View(expressionProfile_data_group)
View(Strader_MEs)
# Create the final dataframe with group rather than timepoint
expressionProfile_data_group <- data.frame(cbind(
group = Strader_MEs$group,
cluster1 = C1_Strader_MEs$Mean,
cluster2 = C2_Strader_MEs$Mean,
cluster3 = C3_Strader_MEs$Mean,
cluster4 = C4_Strader_MEs$Mean,
cluster5 = C5_Strader_MEs$Mean,
cluster6 = C6_Strader_MEs$Mean,
cluster7 = C7_Strader_MEs$Mean,
cluster8 = C8_Strader_MEs$Mean
))
expressionProfile_data_group
expressionProfile_data_group <- data.frame(
group = Strader_MEs$group,
cluster1 = C1_Strader_MEs$Mean,
cluster2 = C2_Strader_MEs$Mean,
cluster3 = C3_Strader_MEs$Mean,
cluster4 = C4_Strader_MEs$Mean,
cluster5 = C5_Strader_MEs$Mean,
cluster6 = C6_Strader_MEs$Mean,
cluster7 = C7_Strader_MEs$Mean,
cluster8 = C8_Strader_MEs$Mean
)
View(expressionProfile_data_group)
# Create a lookup table
group_map <- c(
"Acropora_tenuis.I"   = "Larvae_Atenuis",
"Montipora_capitata.I"= "Larvae_Mcap",
"Pocillopora_acuta.I" = "Larvae_Pacu",
"Stylophora_pistillata.I" = "Larvae_Spis",
"Acropora_tenuis.II"   = "Meta_Atenuis",
"Montipora_capitata.II"= "Meta_Mcap",
"Pocillopora_acuta.II" = "Meta_Pacu",
"Stylophora_pistillata.II" = "Meta_Spis",
"Acropora_tenuis.III"   = "Spat_Atenuis",
"Montipora_capitata.III"= "Spat_Mcap",
"Pocillopora_acuta.III" = "Spat_Pacu",
"Stylophora_pistillata.III" = "Spat_Spis"
)
# Apply the mapping
expressionProfile_data_group$group <- group_map[as.character(expressionProfile_data_group$group)]
# Now make it a factor in the desired order
expressionProfile_data_group$group <- factor(
expressionProfile_data_group$group,
levels = colnames(datTraits_mod)
)
View(expressionProfile_data_group)
# Extract the mean columns from each cluster data frame
cluster_means <- cbind(
C1_Strader_MEs$Mean,
C2_Strader_MEs$Mean,
C3_Strader_MEs$Mean,
C4_Strader_MEs$Mean,
C5_Strader_MEs$Mean,
C6_Strader_MEs$Mean,
C7_Strader_MEs$Mean,
C8_Strader_MEs$Mean,
)
# Extract the mean columns from each cluster data frame
cluster_means <- cbind(
C1_Strader_MEs$Mean,
C2_Strader_MEs$Mean,
C3_Strader_MEs$Mean,
C4_Strader_MEs$Mean,
C5_Strader_MEs$Mean,
C6_Strader_MEs$Mean,
C7_Strader_MEs$Mean,
C8_Strader_MEs$Mean
)
View(expressionProfile_data_group)
expressionProfile_data_timepoint$group <- factor(
expressionProfile_data_timepoint$group,
levels = c(
"Larvae_Atenuis", "Larvae_Mcap", "Larvae_Pacu", "Larvae_Spis",
"Meta_Atenuis", "Meta_Mcap", "Meta_Pacu", "Meta_Spis",
"Spat_Atenuis", "Spat_Mcap", "Spat_Pacu", "Spat_Spis"
)
)
expressionProfile_data_timepoint$group <- factor(
expressionProfile_data_timepoint$group,
levels = c(
"Larvae_Atenuis", "Larvae_Mcap", "Larvae_Pacu", "Larvae_Spis",
"Meta_Atenuis", "Meta_Mcap", "Meta_Pacu", "Meta_Spis",
"Spat_Atenuis", "Spat_Mcap", "Spat_Pacu", "Spat_Spis"
)
)
expressionProfile_data$group <- factor(
expressionProfile_data$group,
levels = c(
"Larvae_Atenuis", "Larvae_Mcap", "Larvae_Pacu", "Larvae_Spis",
"Meta_Atenuis", "Meta_Mcap", "Meta_Pacu", "Meta_Spis",
"Spat_Atenuis", "Spat_Mcap", "Spat_Pacu", "Spat_Spis"
)
)
expressionProfile_data_group$group <- factor(
expressionProfile_data_group$group,
levels = c(
"Larvae_Atenuis", "Larvae_Mcap", "Larvae_Pacu", "Larvae_Spis",
"Meta_Atenuis", "Meta_Mcap", "Meta_Pacu", "Meta_Spis",
"Spat_Atenuis", "Spat_Mcap", "Spat_Pacu", "Spat_Spis"
)
)
Step 2: Create boxplots for each cluster
plots <- list()
for (i in 1:8) {
cluster_col <- paste0("cluster", i)
p <- expressionProfile_data_group %>%
select(group, all_of(cluster_col)) %>%
ggplot(aes(x = group, y = .data[[cluster_col]], fill = group)) +
geom_boxplot(width = .5, outlier.shape = NA, alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 20, size = 5, color = "red") +
geom_point(pch = 21, size = 3, position = position_jitter(width = 0.2)) +
scale_fill_manual(values = rep(RColorBrewer::brewer.pal(12, "Paired"), length.out = 12)) +
scale_x_discrete(labels = gsub("_", "\n", levels(expressionProfile_data_group$group))) +
labs(x = "Species & Life Stage", y = "Mean Module Eigengene", title = paste("Cluster", i)) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
plots[[i]] <- p
}
# Step 3: Combine and export
combined_plot <- wrap_plots(plots, ncol = 2)
ggsave(
filename = "expression_eigengene_profiles_species_lifestage_ordered.png",
plot = combined_plot,
width = 20,
height = 24,
units = "in",
dpi = 300
)
